스피링 프레임웍이란?

* 스프링은 엔터프라이즈 어플리케이션에서 필요로하는 여러가지 기능들을 제공하는 프레임 웍이다
* J2E가 제공하는 기능들을 스프링에서 지원을 하고 있기 때문에 국내에서는 가장 인기 있는 프레임웍으로 자리를 잡았다.
* 스프링은 J2E에서 제공하는 기능 외에 DI나 AOP와 같은 기능을 지원한다.

	##특징 
		=> 스프링은 경략의 프레임 워크
		 . 자바의 객체를 담고있는 컨테이너
		 . 객체의 생성, 소멸과 같은 생명주기를 관리한다.
		
		=> DI(Dependency Injection) 의존성 주입 패턴을 지원한다.
		 . 설정파일을 통해서 의존관계를 설정해주는 패턴
		 
		=> AOP (Aspect Oriented Programming)을 지원
		 . 트랜잭션이나, 로깅, 보안과 같은 공통으로 엔터프라이즈 어플리케이션에서 공통으로 필요로하는 기능을 분리해서 모델에 적용할 수 있도록 기능 제공
		 
		=> 스프링 POJO(Plain Old Java Object)를 지원 한다.
		 . 특정 인터페이스나 클래스를 상속받지 않는 순수한 자바 객체를 스프링 컨테이너가 저장하고 있다.
		
		=> 영속성과 관련되 다양한 API를 제공한다.
		 . JDBC, IBatis, MyBatis, JPA, Hibernate 등과 같은 프레임워크와 연동을 지원한다.
		 

[DI(Dependency Injection) 의존성 주입]

> DI 스프링의 핵심 개념 중의 하나이다.
> 객체 사이의 의존 관계를 객체 자신이 아닌 외부(스프링 컨테이너)에서 수행하는 개념
> 의존관계의 설정은 설정파일(bean.xml)이나 어노테이션을 이용하여 설정할 수 있다.

예)

//AA 객체에서 BB 객체를 생성 (AA는 BB에 종속적이다.)

public class AA {
	BB bb = new BB();
	public void print() {
		bb.aa();
	}
}

public class BB {
	public void aa() {
		System.out.println("BB의 aa() 메소드 입니다.");
	}
}

-> AA는 BB에 의존한다. (AA has a BB)
그렇다면 DI는
 의존하는 객체에 대한 획득을 클래스에서 하지 않고 스프링컨테이너가 주입(제공)
 즉, AA 라는 클래스에서 BB bb = new BB()를 사용하지 않고,
  스프링 컨테이너가 만들어 둔 BB클래스의 인스턴스(instance = bean)를 주입 받은 것이다.
  
   위 와같은 설정은 xml을 통해서 이루어진다.
 
 
## 인터페이스를 이용한 의존성을 낮춤:
--------------	
	service
	           ------------> 인터페이스 (DAO)
	DAO dao                  ------------------------          
	                                   ^        ^
--------------                         |        |
									  aDAO     bDAO

	dao = new aDAO();
	dao = new bDAO();
	
	위의 그림은 의존성이 낮아짐
	코드의 변경 없이 xml의 설정만으로 개발자가 원하는 객체의 주입으로 바꿀 수 있음.



**인터페이스를 임플리먼트한 클래스의 경우는 인터페이스로 객체 생성하는 것이 가능하다.
->
interface
TestDAO --> TestDAOImp implement TestDAO

TestDAO ts = new TestDAOImp 가 가능하다는 것이다.



## [ 의존성 주입 종류 ]
setter(설정 메소드)를 이용한 주입
 :설정 메소드를 사용해서 의존성을 주입하는 것
constructor(생성자)를 통한 주입
 : 생성자를 사용해서의존성을 주입하는 것